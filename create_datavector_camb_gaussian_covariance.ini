;***********************************
;cosmosis script for 6x2pt Roman_SO
;create datavector with gaussian covariance calculated with cosmosis
;***********************************

%include modules/RomanxCMB/params_camb_gaussian_covariance.ini

[runtime]
sampler = test
root = ${COSMOSIS_SRC_DIR}

[pipeline]
fast_slow = F
; first_fast_module = add_intrinsic
; first_fast_module was bin_bias

values = %(ROMANxCMB_SRC_DIR)s/values.ini
priors = %(ROMANxCMB_SRC_DIR)s/priors.ini
modules = consistency camb sigma8_rescale halofit growth high_z_power extrapolate calculate_nz_lens calculate_nz_source unbiased_galaxies IA ia_z_field pk_to_cl bin_bias add_intrinsic shear_m_bias save_2pt
; consistency:       Computes the full set of cosmological parameter, e.g. h->H_0, Omega_m->Omega_m h^2
; -- Compute linear matter power spectra
; > camb:            Computes the CMB and linear matter power spectra
; -- or
; > growth_ehu       Computes the growth rate
; > ehu              Computes the linear matter power spectra from the growth
; > camb_background  Use CAMB to calculate thermal history to get comoving distance to cmb
; sigma8_rescale:    Rescales matter power spectrum to fit the desired sigma_8_input
; halofit:           Computes the nonlinear matter spectrum
; - to compare linear matter power spectrum results replace with rename_matter_power
; > growth:          Computes the growth rate (only when not called above)
; high_z_power:      Extrapolates the matter power spectra to high z using growth function
; extrapolate:       Extrapolates the matter power spectra to high k
; -to load the cosmolike n(z) per bin use: load_nz_lens load_nz_source lens_photoz_bias source_photoz_bias
; calculate_nz_source:Loads the source number density from file and calculates bins
; calculate_nz_source:Loads the lens number density from file and calculates bins
; unbiased_galaxies: Computes the galaxy power spectrum (pretending for the moment that b is 1
; IA:                Computes the NLA intrinsic alignment model
; ia_z_field:        Applies an additional redshift dependence to the NLA model
; -possible future plan to replace the two modules above with eNLA model   
; pk_to_cl:          Computes C_ell values using the Limber integral
; bin_bias:          Applies per-bin bias values to the galaxy-galaxy lensing and galaxy spectra
; add_intrinsic:     Adds the intrinsic alignment contribution to the galaxy lensing
; shear_m_bias:      Applies a shear calibration bias
; -- calculate likelihood
; 2pt_like:          Computes the 2pt function likelihood, note: add 2pt to likelihoods
; -- create and save 2pt datavector
; save_2pt:          Saves the theory power spectra in a data format. Calculates or loads the covariance matrix


likelihoods = 
;extra_output = cosmological_parameters/sigma_8  ; Derived parameter to save

quiet=F
timing=F
debug=T

[DEFAULT]
ROMANxCMB_SRC_DIR = modules/RomanxCMB
2PT_FILE = ${COSMOSIS_SRC_DIR}/%(ROMANxCMB_SRC_DIR)s/6x2pt_Roman_SO_camb_gaussian.fits
2PT_DATA_SETS = shear_cl galaxy_shear_cl shear_cmbkappa_cl galaxy_cl galaxy_cmbkappa_cl cmbkappa_cl
; when the order of the datasets is changed the gaussian covariance calculation breaks!

RUN_NAME = 6x2pt_Roman_SO_gaussian
; planck_like_path=/path/to/planck/data/plc_2.0

[save_2pt]
file = %(ROMANxCMB_SRC_DIR)s/2pt_modified/save_2pt.py
ell_min = 30
ell_max = 3000
n_ell = 20
logspaced = T
real_space = F
shear_nz_name = nz_source
position_nz_name = nz_lens
filename = %(2PT_FILE)s
overwrite = T


;load which bin combinations to use
cosmolike_metadata_file = ${COSMOSIS_SRC_DIR}/%(ROMANxCMB_SRC_DIR)s/cosmolike_data/cov_indices_apr9.txt
spectrum_sections = %(2PT_DATA_SETS)s
;params to calculate covariance
make_covariance = T
cov_calc_multiply_range_instead_of_sum = F
fsky = 0.05 
fsky_cmblensing = 0.05 ; 0.4;fsky for cmb alone is larger than for overlap
cmblensing_noisecurve = ${COSMOSIS_SRC_DIR}/%(ROMANxCMB_SRC_DIR)s/SO_noise_curves/lensing_v3_0_0/Apr17_mv_nlkk_deproj0_SENS1_fsky_16000_iterOn.csv
number_density_lss_arcmin2 =   6.6 6.6 6.6 6.6 6.6 6.6 6.6 6.6 6.6 6.6 ; galaxies per arcminute squared
number_density_shear_arcmin2 = 5.1 5.1 5.1 5.1 5.1 5.1 5.1 5.1 5.1 5.1 ;  " 
sigma_e_total =                0.37 0.37 0.37 0.37 0.37 0.37 0.37 0.37 0.37 0.37 ; note this is multiplied with sqrt 2 since it is both components!



